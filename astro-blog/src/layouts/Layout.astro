---
import { LOCALE, SITE } from "@config";
import "@styles/base.css";
import { ViewTransitions } from "astro:transitions";
import BannerCookies from "@components/BannerCookies.astro";

const googleSiteVerification = import.meta.env.PUBLIC_GOOGLE_SITE_VERIFICATION;

export interface Props {
  title?: string;
  author?: string;
  description?: string;
  ogImage?: string;
  canonicalURL?: string;
  pubDatetime?: Date;
  modDatetime?: Date | null;
  scrollSmooth?: boolean;
}

const {
  title = SITE.title,
  author = SITE.author,
  description = SITE.desc,
  ogImage = SITE.ogImage,
  canonicalURL = new URL(Astro.url.pathname, Astro.site).href,
  pubDatetime,
  modDatetime,
  scrollSmooth = true,
} = Astro.props;

const socialImageURL = new URL(
  ogImage ?? SITE.ogImage ?? "og.png",
  Astro.url.origin
).href;
---

<!DOCTYPE html>
<html
  lang=`${LOCALE.lang ?? "en"}`
  class={`${scrollSmooth && "scroll-smooth"}`}
  data-theme="dark"
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- General Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />

    <!-- Article Published/Modified time -->
    {
      pubDatetime && (
        <meta
          property="article:published_time"
          content={pubDatetime.toISOString()}
        />
      )
    }
    {
      modDatetime && (
        <meta
          property="article:modified_time"
          content={modDatetime.toISOString()}
        />
      )
    }

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={socialImageURL} />

    <!-- Google Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital,wght@0,400;0,500;0,600;0,700;1,400;1,600&display=swap"
      rel="stylesheet"
    />

    <!-- Config PWA
    <link rel="manifest" href={`${SITE.website}./manifest.json`} /> -->
    <!-- ios support -->

    <link rel="apple-touch-icon" href="./icon512_maskable.png" />
    <meta name="apple-mobile-web-app-status-bar" content="#14b8c0" />
    <meta name="theme-color" content="#14b8c0" />

    {
      // If PUBLIC_GOOGLE_SITE_VERIFICATION is set in the environment variable,
      // include google-site-verification tag in the heading
      // Learn more: https://support.google.com/webmasters/answer/9008080#meta_tag_verification&zippy=%2Chtml-tag
      googleSiteVerification && (
        <meta
          name="google-site-verification"
          content={googleSiteVerification}
        />
      )
    }

    <ViewTransitions />

  </head>
  <body>
    <slot />

    <script is:inline src="/toggle-theme.js"></script>
    <script is:inline src="/service-worker/main.js"></script>
  </body>
</html>

<script>
import confetti from "canvas-confetti";

document.addEventListener('astro:page-load', () => {

    const randomInRange = (min:number, max:number) => {
      return Math.random() * (max - min) + min;
    }

    const snow = () => {
      const duration = 15 * 1000;
      const animationEnd = Date.now() + duration;
      let skew = 1;

      const timeLeft = animationEnd - Date.now();
      const ticks = Math.max(20, 50 * (timeLeft / duration));
      skew = Math.max(0.8, skew - 0.001);

      confetti({
        particleCount: 1,
        startVelocity: 0,
        ticks: ticks,
        origin: {
        x: Math.random(),
        y: (Math.random() * skew) - 0.2
        },
        colors: ['#14b8c0'],
        shapes: ['circle', 'square'],
        gravity: randomInRange(0.4, 0.6),
        scalar: randomInRange(0.4, 1),
        drift: randomInRange(-0.4, 0.4),
        zIndex: 2
      });

      if (timeLeft > 0) {
        requestAnimationFrame(snow);
      }
    }

    // const onClickOutside = (event: MouseEvent) => {
    //   const target = event.target as HTMLElement;

    //   const elements = [
    //     {
    //       trigger: document.querySelector('.icon-gear'),
    //       ref: document.querySelector('.layout-config'),
    //       exclude: [
    //         document.querySelector('.layout-options')
    //       ],
    //       className: 'visible'
    //     }
    //   ];

    //     elements.forEach(({ trigger, ref, exclude, className }) => {
    //       if (ref && !ref.contains(target)) {

    //         const isExcluded = exclude.some(excludeElement => excludeElement && excludeElement.contains(target)),
    //               isTrigger = target !== trigger,
    //               isActive = ref.classList.contains(className);

    //         if ( 
    //             !isTrigger &&
    //             !isExcluded &&
    //             isActive
    //           ) {
    //           ref.classList.remove(className);
    //         }
    //       }
    //   });
    // }
    // window.addEventListener('click', onClickOutside);
  });
</script>